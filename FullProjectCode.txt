from cmath import acosh
import cv2
import mediapipe as mp
import numpy as np
from math import acos, ceil, degrees 

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

cap = cv2.VideoCapture("CaraucanMarisabelVideo3.mp4")

with mp_pose.Pose(
    static_image_mode = False) as pose:

    while True:
        ret, frame = cap.read()
        if ret == False:
            break
        height, width, _ = frame.shape
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = pose.process(frame_rgb)

        if results.pose_landmarks is not None: #Corresponde a la cadera izquierda 
            x1 = int(results.pose_landmarks.landmark[24].x * width)
            y1 = int(results.pose_landmarks.landmark[24].y * height)

            x2 = int(results.pose_landmarks.landmark[26].x * width) #Corresponde a la rodilla
            y2 = int(results.pose_landmarks.landmark[26].y * height)

            x3 = int(results.pose_landmarks.landmark[28].x * width) #Corresponde al tobillo
            y3 = int(results.pose_landmarks.landmark[28].y * height)

            #Corresponde a la cadera derecha

            z1 = int(results.pose_landmarks.landmark[23].x * width)
            w1 = int(results.pose_landmarks.landmark[23].y * height)

            z2 = int(results.pose_landmarks.landmark[25].x * width) #Corresponde a la rodilla
            w2 = int(results.pose_landmarks.landmark[25].y * height)

            z3 = int(results.pose_landmarks.landmark[27].x * width) #Corresponde al tobillo
            w3 = int(results.pose_landmarks.landmark[27].y * height)

            p1 = np.array([x1, y1])
            p2 = np.array([x2, y2])
            p3 = np.array([x3, y3])
            p4 = np.array([z1, w1])
            p5 = np.array([z2, w2])
            p6 = np.array([z3, w3])

            l1 = np.linalg.norm(p2 - p3)
            l2 = np.linalg.norm(p1 - p3)
            l3 = np.linalg.norm(p1 - p2)
            l4 = np.linalg.norm(p5 - p6)
            l5 = np.linalg.norm(p4 - p6)
            l6 = np.linalg.norm(p4 - p5)

            #Calcular el ángulo

            angle1 = degrees(acos((l1**2 + l3**2 - l2**2) / (2 * l1 * l3)))
            angle2 = degrees(acos((l4**2 + l6**2 - l5**2) / (2 * l4 * l6)))
            #print("Angle left leg: ", angle1)
            #print("Angle right leg: ", angle2)

            #Visualización
            aux_image = np.zeros(frame.shape, np.uint8)
            cv2.line(aux_image, (x1, y1),(x2, y2), (255, 255, 0), 15) #cambio de 20 a 15
            cv2.line(aux_image, (x2, y2),(x3, y3), (255, 255, 0), 15)
            cv2.line(aux_image, (x1, y1),(x3, y3), (255, 255, 0), 5)
            cv2.line(aux_image, (z1, w1),(z2, w2), (255, 255, 0), 20)
            cv2.line(aux_image, (z2, w2),(z3, w3), (255, 255, 0), 20)
            cv2.line(aux_image, (z1, w1),(z3, w3), (255, 255, 0), 5)
            contours = np.array([[x1, y1], [x2, y2], [x3, y3], [z1, w1], [z2, w2], [z3, w3]])
            cv2.fillPoly(aux_image, pts=[contours], color=(128, 0, 250))

            output = cv2.addWeighted(frame, 1, aux_image, 0.8, 0)

            cv2.circle(output, (x1, y1), 6, (0, 255, 255), 4)
            cv2.circle(output, (x2, y2), 6, (128, 0, 250), 4)
            cv2.circle(output, (x3, y3), 6, (255, 191, 0), 4)
            cv2.putText(output, str(int(angle1)), (x2 + 30, y2), 1, 1.5, (128, 0, 250), 2)
            cv2.circle(output, (z1, w1), 6, (0, 255, 255), 4)
            cv2.circle(output, (z2, w2), 6, (128, 0, 250), 4)
            cv2.circle(output, (z3, w3), 6, (255, 191, 0), 4)
            cv2.rectangle(output, (2000, 0), (450, 600), (128, 128, 128), -1) #500, 600 queda más chico
            cv2.putText(output, str(int(angle2)), (z2 + 30, w2), 1, 1.5, (128, 0, 250), 2)
            cv2.putText(output, str(int(angle1)), (550, 80), 1, 2, (128, 0, 250), 2)
            cv2.putText(output, str(int(angle2)), (550, 160), 1, 2, (128, 0, 250), 2)
            cv2.putText(output,str("Left"), (540, 40), 1, 2, (0, 255, 255), 2 )
            cv2.putText(output,str("Right"), (520, 120), 1, 2, (0, 255, 255), 2 )

            cv2.imshow("output", output)

        cv2.imshow("Frame", frame) 
        if cv2.waitKey(1) & 0xFF == 27:
            break

cap.release()  
cv2.destroyAllWindows         